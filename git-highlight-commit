#!/usr/bin/env bash
set -e

# ─────────────── CONFIG ───────────────
# Lines of context *above* each match; override via:
#   export GIT_HIGHLIGHT_CONTEXT=20
CONTEXT_LINES=${GIT_HIGHLIGHT_CONTEXT:-15}

# ANSI sequences for full-line highlight
ESC=$(printf '\033')
H_START="${ESC}[1;37;48;2;145;0;0m"   # bold white on rgb(145,0,0)
H_END="${ESC}[0m"

# Invisible marker: ZERO WIDTH NON-JOINER (U+200C)
# We will append this at end of each highlighted line.
MARKER=$'\u200C'
# ────────────────────────────────────────

usage() {
  cat <<EOF
Usage: git highlight-commit [-I|--ignore-case] [<git lg args>…] -- <pattern>

Options:
  -I, --ignore-case    match <pattern> case-insensitively in commit messages

Examples:
  git highlight-commit -- TODO
  git highlight-commit -I -- todo
  git highlight-commit -n20 -- 2bc7dfb
EOF
  exit 1
}

# 1) parse -I/--ignore-case and collect git-lg args before “--”
IGNORE_CASE=0
LG_ARGS=()
while [[ $# -gt 0 ]]; do
  case "$1" in
    -I|--ignore-case) IGNORE_CASE=1; shift;;
    --) shift; break;;
    *) LG_ARGS+=( "$1" ); shift;;
  esac
done

# 2) the rest is the search pattern
PATTERN="$*"
[[ -z "$PATTERN" ]] && { echo "Error: missing <pattern> after --"; usage; }

# 3a) commits matching in subject+body
if (( IGNORE_CASE )); then
  mapfile -t MSG_SHA < <(
    git log --color=never "${LG_ARGS[@]}" \
      --grep="$PATTERN" --regexp-ignore-case --format='%H'
  )
else
  mapfile -t MSG_SHA < <(
    git log --color=never "${LG_ARGS[@]}" \
      --grep="$PATTERN" --format='%H'
  )
fi

# 3b) commits whose full 40-char SHA contains the pattern
if (( IGNORE_CASE )); then
  mapfile -t FULL_SHA < <(
    git log --color=never "${LG_ARGS[@]}" --format='%H' \
      | grep -F -i "$PATTERN"
  )
else
  mapfile -t FULL_SHA < <(
    git log --color=never "${LG_ARGS[@]}" --format='%H' \
      | grep -F "$PATTERN"
  )
fi

# 3c) build lookup of 7-char SHA abbreviations
declare -A MATCH
for full in "${MSG_SHA[@]}" "${FULL_SHA[@]}"; do
  if short=$(git rev-parse --short=7 "$full" 2>/dev/null); then
    MATCH["$short"]=1
  fi
done

# 4) find first matching line number in exact git-lg oneline (no colors)
FIRST_LINE=$(
  git lg --color=never "${LG_ARGS[@]}" | \
    awk -v pat="$PATTERN" \
        -v ic="$IGNORE_CASE" \
        -v C="$CONTEXT_LINES" \
        -v keys="$(printf '%s ' "${!MATCH[@]}")" '
      BEGIN {
        split(keys,a)
        for(i in a) M[a[i]] = 1
        if(ic) lp = tolower(pat)
      }
      {
        clean = $0
        sha = ""
        if (match(clean, /[[:space:]]+[0-9a-f]{7} - /)) {
          sha = substr(clean, RSTART+1, 7)
        }
        msgok = 0
        if (ic) {
          if (index(tolower(clean), lp) > 0) msgok = 1
        } else {
          if (index(clean, pat) > 0) msgok = 1
        }
        if (msgok || (sha && (sha in M))) {
          print NR
          exit
        }
      }
    '
)

# 5) compute START & JUMP_ROW so you never overshoot into tildes
if [[ -z "$FIRST_LINE" ]]; then
  START=1; JUMP_ROW=1
elif (( FIRST_LINE > CONTEXT_LINES )); then
  START=$(( FIRST_LINE - CONTEXT_LINES ))
  JUMP_ROW=$(( CONTEXT_LINES + 1 ))
else
  START=1; JUMP_ROW=$FIRST_LINE
fi

# 6) run git-lg, highlight matching lines (appending MARKER), and page
git lg --color=always "${LG_ARGS[@]}" | \
  awk -v pat="$PATTERN" \
      -v ic="$IGNORE_CASE" \
      -v S="$H_START" \
      -v E="$H_END" \
      -v marker="$MARKER" \
      -v keys="$(printf '%s ' "${!MATCH[@]}")" '
    BEGIN {
      split(keys,a)
      for(i in a) M[a[i]] = 1
      if(ic) lp = tolower(pat)
    }
    {
      orig = $0
      clean = orig
      gsub(/\033\[[0-9;]*m/, "", clean)
      sha = ""
      if(match(clean, /[[:space:]]+[0-9a-f]{7} - /)) {
        sha = substr(clean, RSTART+1, 7)
      }
      msgok = 0
      if(ic) {
        if(index(tolower(clean), lp) > 0) msgok = 1
      } else {
        if(index(clean, pat) > 0) msgok = 1
      }
      if (msgok || (sha && (sha in M))) {
        # wrap entire line, then append invisible marker
        print S clean E marker
      } else {
        print orig
      }
    }
  ' | less -R -G +"${START}" -j"${JUMP_ROW}" +/"${MARKER}"
